expand_limits(y = 0) +
facet_wrap(~ category, scales = "free_y") +
theme(legend.position = "none")
theme_set(theme_light())
logs |>
filter(category != "Abs") |>
group_by(week_of_year, category) |>
summarise(total_volume = sum(serie_load),
week_start = first(date),
.groups = "drop") |>
ggplot(aes(week_start, total_volume, color = category)) +
geom_line() +
expand_limits(y = 0) +
facet_wrap(~ category, scales = "free_y") +
theme(legend.position = "none")
theme_set(theme_dark())
logs |>
filter(category != "Abs") |>
group_by(week_of_year, category) |>
summarise(total_volume = sum(serie_load),
week_start = first(date),
.groups = "drop") |>
ggplot(aes(week_start, total_volume, color = category)) +
geom_line() +
expand_limits(y = 0) +
facet_wrap(~ category, scales = "free_y") +
theme(legend.position = "none")
logs |>
group_by(week_of_year) |>
summarise(total_volume = sum(serie_load),
week_start = first(date),
.groups = "drop") |>
ggplot(aes(week_start, total_volume)) +
geom_line() +
expand_limits(y = 0)
logs |>
filter(exercise == "Deadlift")
logs |>
filter(exercise == "Deadlift") |>
groupby(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, max_weight)) +
geom_line()
logs |>
filter(exercise == "Deadlift") |>
group_by(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, max_weight)) +
geom_line()
logs |>
filter(exercise == "Deadlift") |>
group_by(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, total_volume)) +
geom_line()
View(logs)
logs |>
filter(exercise == "Barbell Squat") |>
group_by(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, total_volume)) +
geom_line()
logs |>
filter(exercise == "Deadlift") |>
group_by(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, total_volume)) +
geom_line()
logs |>
filter(exercise == "Barbell Squat") |>
group_by(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, total_volume)) +
geom_line()
logs |>
filter(exercise == "Barbell Squat") |>
group_by(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, total_volume)) +
geom_line() +
expand_limits(y = 0)
logs |>
filter(exercise == "Deadlift") |>
group_by(date) |>
summarise(max_weight = max(weight),
total_volume = sum(serie_load),
.groups = "drop") |>
ggplot(aes(date, total_volume)) +
geom_line() +
expand_limits(y = 0)
theme_set(theme_light())
library(shiny)
library(tidyverse)
library(shinythemes)
runApp('gym_track')
runApp('gym_track')
data <- read_csv("../full_data.csv")
data <- read_csv("full_data.csv")
runApp('gym_track')
runApp('gym_track')
setwd("~/Documents/Gym/gym_logs/gym_track")
data <- read_csv("../full_data.csv") |> janitor::clean_names()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
styler:::style_active_file()
data |>
filter(category == "Chest") |>
distinct(exercise)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data |>
filter(category == "Chest") %>%
unique(.$exercise)
data |>
filter(category == "Chest") %>%
pull(exercise)
data |>
filter(category == "Chest") %>%
pull(exercise) |>
unique()
data |>
filter(category == "Chest") %>%
pull(exercise) |>
unique()
data |>
filter(category == "Chest") %>%
pull(exercise) |>
unique() |>
[1]
runApp()
runApp()
runApp()
data
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
theme_set(theme_light())
logs_raw <- read_csv("full_data.csv")
logs_raw <- read_csv("../full_data.csv")
clean_data <- function(tbl){
tbl |>
janitor::clean_names() |>
rename(c(weight = "weight_kgs")) |>
select(date, exercise, category, weight, reps) |>
mutate(serie_load = weight * reps,
week_of_year = as.integer(format(date, "%V")))
}
logs <-
logs_raw |>
clean_data()
logs |> write_csv("../clean_data.csv")
data <- read_csv("../clean_data.csv") |> janitor::clean_names()
data
runApp()
runApp()
runApp()
runApp()
runApp()
sort(c("matias","taron"))
sort(c("simoes","matias","taron"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- bind_rows(
data,
data |>
mutate(exercise = "All",
category = "All")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?rollmean
runApp()
runApp()
runApp()
runApp()
runApp()
graph_options
graph_options <- c("Max Weight","Max Reaps","Max Volume",
"Workout Volume","Workout Reps")
graph_options
graph_options <- c("max_weight","max_reps","max_volume",
"workout_volume","workout_reps")
graph_options <- c("max_weight","max_reps","max_volume",
"workout_volume","workout_reps")
names(graph_options) <- str_to_title(str_replace(graph_options,"_"," "))
graph_options
runApp()
runApp()
runApp()
graph_options
styler:::style_active_file()
runApp()
data
data |> select("date")
data |> select(variable = "date")
# generate bins based on input$bins from ui.R
graph_options["Max Reps"]
runApp()
runApp()
runApp()
runApp()
runApp()
graph_options["Max Reps"]
graph_options["Max Reps"][1]
graph_options["Max Reps"] |> pull()
runApp()
runApp()
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplotly
runApp()
runApp()
?renderPlotly
?add_trace
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
logs_raw <- read_csv("../full_data.csv")
clean_data <- function(tbl){
tbl |>
janitor::clean_names() |>
rename(c(weight = "weight_kgs")) |>
select(date, exercise, category, weight, reps) |>
mutate(serie_load = weight * reps,
week_of_year = as.integer(format(date, "%V")))
}
logs <-
logs_raw |>
clean_data()
logs |> write_csv("../clean_data.csv")
runApp()
group_period <- c("date","week")
names(group_period) <- str_to_title(group_period)
runApp()
runApp()
runApp()
data
logs_raw <- read_csv("../full_data.csv")
clean_data <- function(tbl){
tbl |>
janitor::clean_names() |>
rename(c(weight = "weight_kgs")) |>
select(date, exercise, category, weight, reps) |>
mutate(serie_load = weight * reps,
week_of_year = as.integer(format(date, "%V")),
week = floor_date(date, unit = "week"))
}
logs <-
logs_raw |>
clean_data()
logs |> write_csv("../clean_data.csv")
View(logs)
data <- read_csv("../clean_data.csv")
runApp()
runApp()
runApp()
library(tidymetrics)
install.packages("tidymetrics")
remotes::install_github("ramnathv/tidymetrics")
library(tidymetrics)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
logs_raw <- read_csv("../full_data.csv")
clean_data <- function(tbl){
tbl |>
janitor::clean_names() |>
rename(c(weight = "weight_kgs")) |>
select(date, exercise, category, weight, reps) |>
mutate(serie_load = weight * reps,
week_of_year = as.integer(format(date, "%V")),
week = floor_date(date, unit = "week"))
}
logs <-
logs_raw |>
clean_data()
logs |> write_csv("../clean_data.csv")
View(logs)
runApp()
logs_raw <- read_csv("../full_data.csv")
clean_data <- function(tbl){
tbl |>
janitor::clean_names() |>
rename(c(weight = "weight_kgs")) |>
select(date, exercise, category, weight, reps) |>
mutate(serie_load = weight * reps,
week_of_year = as.integer(format(date, "%V")),
week = floor_date(date, unit = "week"))
}
logs <-
logs_raw |>
clean_data()
logs |> write_csv("../clean_data.csv")
runApp()
runApp()
runApp()
runApp()
?summarise
runApp()
runApp()
runApp()
runApp()
?need
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
library(tidyverse)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dateRangeInput()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?updateSliderInput
runApp()
runApp()
?observeEvent()
runApp()
runApp()
runApp()
runApp()
str(data)
runApp()
period(1,"day")
runApp()
min(data$date)
class(min(data$date))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?updateSliderInput
runApp()
runApp()
runApp()
runApp()
?observeEvent()
?bindEvent()
runApp()
install.packages('golem')
